diff --git a/components/vfs/include/esp_vfs.h b/components/vfs/include/esp_vfs.h
index ab645fcc..61d75ac3 100644
--- a/components/vfs/include/esp_vfs.h
+++ b/components/vfs/include/esp_vfs.h
@@ -24,6 +24,8 @@
 #include <sys/stat.h>
 #include <dirent.h>
 
+#include "lwip/sockets.h"
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -166,6 +168,14 @@ typedef struct
         int (*fsync_p)(void* ctx, int fd);
         int (*fsync)(int fd);
     };
+    union {
+        int (*writev_p)(void* ctx, int fd, const struct iovec *iov, int iovcnt);
+        int (*writev)(int fd, const struct iovec *iov, int iovcnt);
+    };
+    union {
+        int (*select_p)(void* ctx, int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout);
+        int (*select)(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout);
+    };
 } esp_vfs_t;
 
 
diff --git a/components/vfs/vfs.c b/components/vfs/vfs.c
index 5dbd462c..6cd31f14 100644
--- a/components/vfs/vfs.c
+++ b/components/vfs/vfs.c
@@ -552,3 +552,136 @@ int fsync(int fd)
     CHECK_AND_CALL(ret, r, vfs, fsync, local_fd);
     return ret;
 }
+
+ssize_t writev(int fd, const struct iovec *iov, int iovcnt)
+{
+    const vfs_entry_t* vfs = get_vfs_for_fd(fd);
+    struct _reent* r = __getreent();
+    if (vfs == NULL) {
+        __errno_r(r) = EBADF;
+        return -1;
+    }
+    int local_fd = translate_fd(vfs, fd);
+    ssize_t ret;
+    CHECK_AND_CALL(ret, r, vfs, writev, local_fd, iov, iovcnt);
+    return ret;
+}
+
+#define VFS_FD_SET_NUM 2
+
+typedef struct {
+   fd_set readset;
+   fd_set writeset;
+   fd_set exceptset;
+   const vfs_entry_t *vfs;
+} vfs_fd_set_t;
+
+static vfs_fd_set_t *get_vfs_fd_set_for(int fd, vfs_fd_set_t *vfs_fd_set) {
+   const vfs_entry_t *vfs = get_vfs_for_fd(fd);
+    if (vfs) {
+       int min_fd = vfs->offset << VFS_INDEX_S;
+       int max_fd = (vfs->offset + 1) << VFS_INDEX_S;
+
+       if ((fd >= min_fd) && (fd < max_fd)) {
+           int i;
+
+           // Search if vfs has an assigned fd_set
+           for(i = 0;i < VFS_FD_SET_NUM;i++) {
+               if (vfs_fd_set[i].vfs == vfs) {
+                   return &vfs_fd_set[i];
+               }
+           }
+
+           // Find an empty fd_set fot the vfs
+           for(i = 0;i < VFS_FD_SET_NUM;i++) {
+               if (!vfs_fd_set[i].vfs) {
+                   vfs_fd_set[i].vfs = vfs;
+
+                   return &vfs_fd_set[i];
+               }
+           }
+       }
+    }
+
+   return NULL;
+}
+
+int vfs_select (int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout) {
+   struct _reent* r = __getreent();
+   int min_fd;
+   int max_fd;
+
+   int i;
+
+   // Initialize fd_set for each vfs
+   vfs_fd_set_t vfs_fd_set[VFS_FD_SET_NUM];
+
+   for(i = 0;i < VFS_FD_SET_NUM;i++) {
+       FD_ZERO(&vfs_fd_set[i].readset);
+       FD_ZERO(&vfs_fd_set[i].writeset);
+       FD_ZERO(&vfs_fd_set[i].exceptset);
+       vfs_fd_set[i].vfs = NULL;
+   }
+
+   vfs_fd_set_t *fd_sets;
+
+   int fd;
+
+   for(fd = 0;fd <= maxfdp1;fd++) {
+       if (readset && FD_ISSET(fd, readset)) {
+           fd_sets = get_vfs_fd_set_for(fd, vfs_fd_set);
+           if (fd_sets) {
+               FD_SET(fd, &fd_sets->readset);
+           }
+       }
+
+       if (writeset && FD_ISSET(fd, writeset)) {
+           fd_sets = get_vfs_fd_set_for(fd, vfs_fd_set);
+           if (fd_sets) {
+               FD_SET(fd, &fd_sets->writeset);
+           }
+       }
+
+       if (exceptset && FD_ISSET(fd, exceptset)) {
+           fd_sets = get_vfs_fd_set_for(fd, vfs_fd_set);
+           if (fd_sets) {
+               FD_SET(fd, &fd_sets->exceptset);
+           }
+       }
+   }
+
+   int ret;
+   int num = 0;
+
+   for(i = 0;i < VFS_FD_SET_NUM;i++) {
+       if (vfs_fd_set[i].vfs) {
+           CHECK_AND_CALL(ret, r, vfs_fd_set[i].vfs, select, maxfdp1, &vfs_fd_set[i].readset, &vfs_fd_set[i].writeset, &vfs_fd_set[i].exceptset, timeout);
+           if (ret < 0) {
+               return ret;
+           }
+
+           if (ret >= 0) {
+               num = num + ret;
+
+               min_fd = vfs_fd_set[i].vfs->offset << VFS_INDEX_S;
+               max_fd = (vfs_fd_set[i].vfs->offset + 1) << VFS_INDEX_S;
+
+               for(fd = min_fd;fd < max_fd;fd++) {
+                   if (readset && !FD_ISSET(fd, &vfs_fd_set[i].readset)) {
+                       FD_CLR(fd, readset);
+                   }
+
+                   if (writeset && !FD_ISSET(fd, &vfs_fd_set[i].writeset)) {
+                       FD_CLR(fd, writeset);
+                   }
+
+                   if (exceptset && !FD_ISSET(fd, &vfs_fd_set[i].exceptset)) {
+                       FD_CLR(fd, exceptset);
+                   }
+               }
+           }
+       }
+   }
+
+   return num;
+}
